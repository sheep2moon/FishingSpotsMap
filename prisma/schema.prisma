// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Role {
    USER
    MODERATOR
}

enum NotificationType {
    MODERATE
    INFORMATION
    SPOT
    REPLY
}

enum ReactionType {
    LIKE
    DISLIKE
    HELPFUL
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Achievement {
    id                   String            @id @default(cuid())
    name                 String
    description          String
    points               Int
    max_level            Int               @db.TinyInt
    level_multiplication Int
    icon_url             String
    userAchievements     UserAchievement[]
}

model UserAchievement {
    userId        String
    achievementId String
    progress      Int
    earnedAt      DateTime?
    current_level Int         @db.TinyInt
    locked        Boolean     @default(false)
    user          User        @relation(fields: [userId], references: [id])
    achievement   Achievement @relation(fields: [achievementId], references: [id])

    @@id([userId, achievementId])
    @@index([achievementId])
    @@index([userId])
}

model Comment {
    id           String       @id @default(cuid())
    content      String       @db.Text
    authorId     String
    author       User         @relation("Author", fields: [authorId], references: [id])
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    discussionId String
    attachment   Attachment[]
    discussion   Discussion   @relation(fields: [discussionId], references: [id])
    replyToId    String?
    replyTo      User?        @relation("ReplyingTo", fields: [replyToId], references: [id])
    parentId     String? // Referencja do nadrzędnego komentarza
    parent       Comment?     @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies      Comment[]    @relation("CommentToComment")
    reactions    Reaction[]

    @@index([discussionId])
    @@index([parentId])
    @@index([authorId])
    @@index([replyToId])
}

model Attachment {
    id           String      @id @default(cuid())
    name         String      @default("Dołączony plik")
    type         String      @default("nieznany")
    url          String
    Discussion   Discussion? @relation(fields: [discussionId], references: [id])
    Comment      Comment?    @relation(fields: [commentId], references: [id])
    discussionId String?
    commentId    String?

    @@index([commentId])
    @@index([discussionId])
}

model Reaction {
    id        String       @id @default(cuid())
    type      ReactionType
    authorId  String
    commentId String
    comment   Comment      @relation(fields: [commentId], references: [id])
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    author    User         @relation(fields: [authorId], references: [id])

    @@index([commentId])
    @@index([authorId])
}

model Tag {
    id          String            @id @default(cuid())
    name        String            @unique
    description String?
    discussions TagOnDiscussion[]
}

model TagOnDiscussion {
    tagId        String
    discussionId String
    tag          Tag        @relation(fields: [tagId], references: [id])
    discussion   Discussion @relation(fields: [discussionId], references: [id])

    @@id([tagId, discussionId])
    @@index([discussionId])
    @@index([tagId])
}

model Discussion {
    id          String            @id @default(cuid())
    title       String
    content     String            @db.Text
    authorId    String
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    tags        TagOnDiscussion[]
    attachments Attachment[]
    comments    Comment[]
    author      User              @relation(fields: [authorId], references: [id])

    @@index([authorId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id               String            @id @default(cuid())
    name             String?
    email            String?           @unique
    role             Role              @default(USER)
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    Review           Review[]
    Image            Image[]
    notified         Notification[]    @relation(name: "NotifiedUser")
    notifier         Notification[]    @relation(name: "NotifierUser")
    followedSpots    FishingSpot[]
    userAchievements UserAchievement[]
    discussions      Discussion[]
    reactions        Reaction[]
    achievementId    String?
    comments         Comment[]         @relation("Author")
    comment_replies  Comment[]         @relation("ReplyingTo")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Notification {
    id            String           @id @default(cuid())
    fishingSpot   FishingSpot?     @relation(fields: [fishingSpotId], references: [id])
    fishingSpotId String?
    notified      User             @relation(name: "NotifiedUser", fields: [notifiedId], references: [id])
    notifiedId    String
    notifier      User             @relation(name: "NotifierUser", fields: [notifierId], references: [id])
    notifierId    String
    read          Boolean          @default(false)
    createdAt     DateTime         @default(now())
    comment       String
    type          NotificationType @default(INFORMATION)

    @@index([fishingSpotId])
    @@index([notifiedId])
    @@index([notifierId])
}

model Image {
    id            String       @id @default(cuid())
    addedBy       User?        @relation(fields: [userId], references: [id])
    url           String?
    source        String?
    userId        String?
    comment       String?
    FishingSpot   FishingSpot? @relation(fields: [fishingSpotId], references: [id])
    fishingSpotId String?

    @@index([fishingSpotId])
    @@index([userId])
}

model Review {
    id            String      @id @default(cuid())
    createdBy     String
    user          User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
    comment       String      @db.Text
    rate          Int
    createdAt     DateTime    @default(now())
    FishingSpot   FishingSpot @relation(fields: [fishingSpotId], references: [id], onDelete: Cascade)
    fishingSpotId String

    @@index([createdBy])
    @@index([fishingSpotId])
}

model FishingSpot {
    id                String         @id @default(cuid())
    createdAt         DateTime       @default(now())
    acceptedBy        String?
    published         Boolean
    reviews           Review[]
    images            Image[]
    prices            String
    lat               Float
    lng               Float
    name              String
    description       String         @db.Text
    province          String
    city              String
    fish_types        String         @db.Text
    area              String
    contact_page      String?
    contact_phone     Int?
    contact_instagram String?
    contact_email     String?
    night_fishing     Boolean
    tent              Boolean
    accommodation     Boolean
    spinning          Boolean
    followingUsers    User[]
    notifications     Notification[]
}
