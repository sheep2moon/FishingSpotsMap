// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Role {
    USER
    MODERATOR
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

//#section
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    role          Role         @default(USER)
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    UserLibrary   UserLibrary?
    Review        Review[]
    Image         Image[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// model Image {
//     id            String       @id @default(cuid())
//     url           String?
//     FishingSpot   FishingSpot? @relation(fields: [fishingSpotId], references: [id], onDelete: Cascade)
//     fishingSpotId String?

//     @@index([fishingSpotId])
// }

model Image {
    id            String       @id @default(cuid())
    addedBy       User?        @relation(fields: [userId], references: [id])
    source        String?
    userId        String?
    comment       String?
    FishingSpot   FishingSpot? @relation(fields: [fishingSpotId], references: [id])
    fishingSpotId String?
}

model UserLibrary {
    id       String        @id @default(cuid())
    user     User          @relation(fields: [userId], references: [id])
    wishlist FishingSpot[] @relation("Wishlist")
    visited  FishingSpot[] @relation("Visited")
    userId   String        @unique
}

model Review {
    id            String      @id @default(cuid())
    createdBy     String
    user          User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
    comment       String      @db.Text
    rate          Int
    createdAt     DateTime    @default(now())
    FishingSpot   FishingSpot @relation(fields: [fishingSpotId], references: [id], onDelete: Cascade)
    fishingSpotId String

    @@index([createdBy])
    @@index([fishingSpotId])
}

model FishingSpot {
    id            String        @id @default(cuid())
    createdAt     DateTime      @default(now())
    acceptedBy    String?
    wishlistedBy  UserLibrary[] @relation("Wishlist")
    visitedBy     UserLibrary[] @relation("Visited")
    published     Boolean
    reviews       Review[]
    images        Image[]
    imagesId      String
    prices        String
    lat           Float
    lng           Float
    name          String
    description   String        @db.Text
    province      String
    city          String
    fish_types    String        @db.Text
    area          String
    contact       String
    night_fishing Boolean
    tent          Boolean
    accommodation Boolean
    spinning      Boolean
}
